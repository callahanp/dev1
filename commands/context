#!/bin/bash
#
# Dev1's operations, ide, build and run depend on
# the settings for suite, and task, are primary
# and establish the environment for all the other
# sttings required by each operation.
#
# ide requires suite, task & code-workspace names
# build requires suite, task, variant, build options/parameters
# run requires suite, task, variant, run options/parameters.
#
# attempting to set all of these in one context handler proved daunting.
#
# Suite and task can be changed at will, but the others once set up tend to be stable.

# What we want to be able to do is to specify an operation and without specifying anything,
# use what was chosen previously

# Suite and Task are set in the context routine, but the remaining ones are set using a utility
# command that sets the name and persists the selection as current. Context will pick up
# whatever was declared current for a given task with a simple copy.

# Suites are Apps, or sets of related Apps
# Tasks are esslsentially things that need doing for specific git refs. A git ref is either
# a specific commit, a tag or a branch.  Tasks usually have the same name as  a tag or branch.

# The tasks directory stores the current copy of currentBuildOptions is a copy of some other

# There is no restriction on how many of each type of selection you can have.
# These are placed in the project file, with the names a, b and c chosen to be meaningful in whichever branch needs them.
# They are optional, if any are not present, an empty file will be used for the current.whatever

# Names are arbitrary and you can mix and match using wildcards to put a set of them into effect different names to current for any of them

# Selections are made by name, and theoretically you could use the suite name for everything


# name.task
# name.code-workspace
# name.variant
# name.Build.Options,
# name.Build.Parameters,
# name.Run.Options,
# name.Run.Parameters

# current.suite.name (an empty file in DEV1_SUITES_PATH)

# current.task
# current.code-workspace
# current.variant
# current.Build.Options
# current.Build.Parameters
# current.Run.Options
# current.Run.Parameters

# shellcheck disable=SC1091
source "${DEV1_COMMANDS_PATH}/utils/utilityFunctions"

#echo "--------------------- Starting Context ---------------------"

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then RETURN_OR_EXIT="exit"; else RETURN_OR_EXIT="return"; fi

if [[ "$DEV1_DEBUG" != "" ]]; then
  echo "starting $DEV1_COMMANDS_PATH/context " "$@"
  set -x
fi
source "${DEV1_COMMANDS_PATH}/utils/utilityFunctions"
if [[ "$DEV1_DEBUG" != "" ]]; then
  echo "starting ${DEV1}/commands/context " "$@"
  set -x
fi

shifts=0
if [[ "$1" == "reset" ]]; then
unset DEV1_SUITE_NAME DEV1_TASK_NAME DEV1_CODE_WORKSPACE_PATH \
              DEV1_BUILD_VARIANT_PATH \
              DEV1_BUILD_OPTIONS_PATH DEV1_BUILD_PARAMETERS_PATH\
              DEV1_RUN_VARIANT_PATH \
              DEV1_RUN_OPTIONS_PATH DEV1_RUN_PARAMETERS_PATH
  shift
  (( shifts++ ))
fi
if  [[ "$1" != "" && "$1" != "--" ]]; then
  suiteName=""
  mapfile -t foundExactSuite\
      < <(find "$DEV1_SUITES_PATH/"\
            -maxdepth 1 -type d -name "$1")
  mapfile -t foundWildcardSuite\
      < <(find "$DEV1_SUITES_PATH/"\
        -maxdepth 1 -type d -regex ".*$1.*"  -printf "%f\n")
                                  if [[ $DEV1_DEBUG != "" ]]; then
                                    DumpVars foundExactSuite foundWildcardSuite
                                  fi
  if [[ ${foundExactSuite[0]} != "" ]]; then
    suiteName=$(basename "${foundExactSuite[0]}")
  elif [[ "${#foundWildcardSuite[@]}" == "1" ]]; then
    suiteName=${foundWildcardSuite[0]}
    shift;
  elif [[ "${#foundWildcardSuite[@]}" == "0" ]]; then
    suiteName=""
  else
    echo ""
    echo " $1 matched more than one suite.  Please choose one by number:"
    echo ""
    for (( i=0; i<${#foundWildcardSuite[@]}; i++ )); do
      (( i++ ))
      echo "$j ${foundWildcardSuite[i]}"
    done
    unset choice
    read -rp "choice: " choice
    choice=$(( choice - 1 ))
    suiteName="${foundWildcardSuite[$choice]}"
  fi
fi

if [[ "$suiteName" != "" ]]; then
  DEV1_SUITE_NAME="$suiteName"
  (( shifts++ ))
  shift
else
  if [[ -e $DEV1_SUITES_PATH/current.suite.name ]]; then
    DEV1_SUITE_NAME=$(cat <"$DEV1_SUITES_PATH/.current.suite.name")
  fi
fi
if [[ "$suiteName" != "" ]]; then
  echo "$suiteName" > "$DEV1_SUITES_PATH/.current.suite.name"
fi
DEV1_SUITE_PATH="$DEV1_SUITES_PATH/$suiteName"
 
# ---------------- TASKS ------------------------------------------------

DEV1_TASKS_PATH="$DEV1_SUITES_PATH"/"$DEV1_SUITE_NAME/tasks"
cd "$DEV1_TASKS_PATH" || RETURN_OR_EXIT
searchPath="$DEV1_TASKS_PATH/"
taskName=""

if  [[ "$1" != "" && "$1" != "--" ]]; then
  mapfile -t foundExactTask< <(find  "$searchPath"\
    -maxdepth 1 -name "$1" -printf "%f\n")
  mapfile -t foundWildcardTask < <(find "$searchPath" \
    -maxdepth 1 -regex ".*$1.*" -printf "%f\n")
                                if [[ $DEV1_DEBUG != "" ]]; then
                                DumpVars foundExactTask foundWildcardTask
                                fi
  if [[ ${foundExactTask[0]} == "" && "${#foundWildcardTask[@]}" == "0" ]]; then
    taskName=""
  elif [[ ${foundExactTask[0]} != "" ]]; then
    taskName=$(basename "${foundExactTask[0]}")
  elif [[ "${#foundWildcardTask[@]}" == "1" ]]; then
    taskName=$(basename "${foundWildcardTask[0]}")
  echo ${#foundWildcardTask[@]}
  else
    echo ""
    echo " $1 matched more than one task.  Please choose one by number:"
    echo ""
    for (( i=0; i<${#foundWildcardTask[@]}; i++ )); do
        j=$(( i+1 ))
        echo "$j ${foundWildcardTask[i]}"
    done
    unset choice
    read -rp "choice: " choice
    choice=$(( choice++ ))
    taskName="${foundWildcardTask[$choice]}"
  fi
fi
if [[ "$taskName" != "" ]]; then
  DEV1_TASK_NAME="$taskName"
  DEV1_TASK_PATH="$DEV1_TASKS_PATH/$taskName" 
  (( shifts++ ))
  shift
else
  if [[ -e $DEV1_SUITES_PATH/current.suite.name ]]; then
    DEV1_SUITE_NAME=$(cat <"$DEV1_SUITES_PATH/project/current.suite.name")
  fi
fi

if [[ "$DEV1_TASK_NAME" == "" ]]; then
  DEV1_TASK_NAME=$(cat <"$DEV1_TASKS_PATH/current.task.name")
  DEV1_TASK_PATH="$DEV1_TASKS_PATH"/"$DEV1_TASK_NAME"
fi
# ------------------------- code workspace --------------------
DEV1_TASK_PATH="$DEV1_SUITES_PATH/$DEV1_SUITE_NAME/tasks/$DEV1_TASK_NAME"
cd "$DEV1_TASK_PATH" || RETURN_OR_EXIT
searchPath="$DEV1_TASK_PATH"
codeWorkspaceName=""

if  [[ "$1" != "" && "$1" != "--" ]]; then
  mapfile -t foundExactCodeWorkspace< <(find "$searchPath"\
    -maxdepth 1 -name "$1.code-workspace" -printf "h/%f\n")
  mapfile -t foundWildcardCodeWorkspace < <(find "$searchPath" \
    -maxdepth 1 -regex ".*$1.*[.]code-workspace" -printf "%h/%f\n")

  if [[ ${foundExactCodeWorkspace[0]} == "" ]]; then
    codeWorkspaceName=""
  elif [[ ${foundExactCodeWorkspace[0]} != "" ]]; then
    codeWorkspaceName=$(basename "${foundExactCodeWorkspace[0]}")
  elif [[ "${#foundWildcardCodeWorkspace[@]}" == "1" ]]; then
    codeWorkspaceName=$(basename "${foundWildcardCodeWorkspace[0]}")

  else
    echo ""
    echo " $1 matched more than one .code-worspace file.  Please choose one by number:"
    echo ""
    for (( i=0; i<${#foundWildcardCodeWorkspace[@]}; i++ )); do
        j=$(( i+1 ))
        echo "$j ${foundWildcardCodeWorkspace[i]}"
    done
    unset choice
    read -rp "choice: " choice
    choice=$(( choice - 1 ))
    echo "choice: $choice"
    codeWorkspaceName="${foundWildcardCodeWorkspace[$choice]}"
  fi
fi

if [[ "$codeWorkspaceName" != "" ]]; then
  DEV1_CODE_WORKSPACE_PATH="$codeWorkspaceName"
  (( shifts++ ))
  shift
else
  if [[ -e $DEV1_SUITES_PATH/project/current.codeWorkspace.name ]]; then
    DEV1_CODE_WORKSPACE_PATH=$(cat <DEV1_SUITES_PATH/project/current.codeWorkspace.name)
  fi
fi


# ----------------------------   Options and Parameters Matching ---------------------------------------
#find ${1}.build.variant
#find ${1}.build.options
#find ${1}.build.parameters
#find ${1}.run.Options
#find ${1}.run.parameters

# defaults:
# debug.build.variant

# $taskName.build.options if present
# $suiteName.build.options if present
# otherwise none
#
# same for build.parameters, run.options and run.parameters

# you could have different ids for all four
# the resulting four variables contain a path to the relevant file
buildVariant=""
buildOptions=""
buildParameters=""
runOptions=""
runParameters=""

optionPaths=("$DEV1_TASK_PATH" "$DEV1_SUITE_PATH/project" )

# use patterns for exact match
# $1.build.variant
# $1.build.options
# $1.build.parameters
# $1.run.options
# $1.run.parameters
# $1uild.options
# $1uild.parameters
# $1un.options
# $1un.parameters
# $1.variant
# $1.options
# $1.parameters
exactMatchPatterns=(  "[.]build[.]variant" \
                      "[.]build[.]options" "[.]build[.]parameters" \
                      "[.]run[.]options" "[.]run[.]parameters" \
                      "uild[.]options" "uild[.]parameters" \
                      "un[.]options" "un[.]parameters" \
                      "[.]variant" \
                      "[.]options" "[.]parameters" \
                      "$")

while  [[ "$1" != "" && "$1" != "--" ]]; do
  for  optionPath in "${optionPaths[@]}"; do
    for  exactMatchPattern in "${exactMatchPatterns[@]}"; do
      exactMatchPattern="$1$exactMatchPattern"
      mapfile -t matches < <(find "$optionPath/" -maxdepth 1 -regex "$exactMatchPattern" -printf "%f" )
      for match in ${matches[0]}; do
          if [[ "$buildVariant"  == "" && $match =~ [.]*[.]build[.]variant    ]]; then
          buildVariant=$match
        fi
        if [[ "$buildOptions"    == "" && $match =~ [.]*[.]build[.]options    ]]; then
          buildOptions=$match
        fi
        if [[ "$buildParameters" == "" && $match =~ [.]*[.]build[.]parameters ]]; then
          buildParameters=$match
        fi
        if [[ "$runVariant"      == "" && $match =~ [.]*[.]run[.]variant      ]]; then
          runVariant=$match
        fi
        if [[ "$runOptions"      == "" && $match =~ [.]*[.]run[.]options      ]]; then
          runOptions=$match
        fi
        if [[ "$runParameters"   == "" && $match =~ [.]run[.]parameters       ]]; then
          runParameters=$match
        fi
      done
    done
  done
  (( shifts++ ))
  shift
done

optionPaths=( "$DEV1_TASK_PATH" "$DEV1_SUITE_PATH/project" "$DEV1_TEMPLATES_PATH" )
#fill in with defaults if not yet found
for  optionPath in "${optionPaths[@]}"; do

  optionPathBuildVariant=$optionPath/default.build.variant
  optionPathBuildOptions=$optionPath/default.build.options
  optionPathBuildParameters=$optionPath/default.build.parameters
  optionPathRunVariant=$optionPath/default.run.variant
  optionPathRunOptions=$optionPath/default.run.options
  optionPathRunParameters=$optionPath/default.run.parameters

  if [[ "$buildVariant"     == "" && -e "$optionPathBuildVariant" ]]; then
    buildVariant=$optionPathBuildVariant
  fi
  if [[ "$buildOptions"    == "" && -e "$optionPathBuildOptions" ]]; then
    buildOptions=$optionPathBuildOptions
  fi
  if [[ "$buildParameters" == "" && -e "$optionPathBuildParameters" ]]; then
    buildParameters=$optionPathBuildParameters

  fi
  if [[ "$runVariant"      == "" && -e "$optionPathRunVariant" ]]; then
    runVariant=$optionPathRunVariant
  fi
  if [[ "$runOptions"      == "" && -e "$optionPathRunOptions" ]]; then
    runOptions=$optionPathRunOptions
  fi
  if [[ "$runParameters"     == "" && -e "$optionPathRunParameters" ]]; then
    runParameters=$optionPathRunParameters
  fi
done



export DEV1_SUITE_NAME
export DEV1_SUITE_PATH
export DEV1_TASK_NAME
export DEV1_BUILD_VARIANT_PATH=$buildVariant
DEV1_BUILD_VARIANT_NAME=$(cat "$buildVariant")
export DEV1_BUILD_VARIANT_NAME
export DEV1_BUILD_OPTIONS_PATH=$buildOptions
export DEV1_BUILD_PARAMETERS_PATH=$buildParameters
export DEV1_RUN_VARIANT_PATH=$runVariant
export DEV1_RUN_OPTIONS_PATH=$runOptions
export DEV1_RUN_PARAMETERS_PATH=$runParameters
export DEV1_CODE_WORKSPACE_PATH
export DEV1_BUILDS_PATH="$DEV1_SUITE_PATH/builds"
export DEV1_BUILD_PATH=$DEV1_BUILDS_PATH/$DEV1_TASK_NAME/$DEV1_BUILD_VARIANT_NAME
export DEV1_PROJECT_PATH="$DEV1_SUITE_PATH/project"
export DEV1_TASK_PATH
export shifts

DEV1_EXPORTS=( \
          DEV1_SUITE_NAME DEV1_SUITE_PATH \
          DEV1_TASK_NAME DEV1_TASK_PATH \
          DEV1_CODE_WORKSPACE_PATH \
          DEV1_BUILD_VARIANT_PATH \
          DEV1_BUILD_OPTIONS_PATH DEV1_BUILD_PARAMETERS_PATH\
          DEV1_RUN_VARIANT_PATH \
          DEV1_RUN_OPTIONS_PATH DEV1_RUN_PARAMETERS_PATH \
          DEV1_PROJECT_PATH )

                                if [[ $DEV1_DEBUG != "" ]]; then
                                DumpVars  "${DEV1_EXPORTS[@]}"
                                fi
export    "${DEV1_EXPORTS[@]}"
#echo "--------------------- Context Complete ---------------------"

$RETURN_OR_EXIT 
