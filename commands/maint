#!/bin/bash

# dev1/commands/maint
# Alias m="source $DEV1_COMMANDS_PATH/maint"
#
# maint processes a json configuration file to create and maintain a git worktree based development
# environtment for multi-root visual studio code workspaces.

# usage:
#
# using bash source:

#   source $DEV1_COMMANDS_PATH/maint <suite-name>

# or through an alias: 
#   m <suiteName>
# or as a command
#   $DEV1_COMMANDS_PATH/maint <suiteName>
# ToDo - Path variables for all Suite Directories. Use $DEV1_SUITES_PATH only once. Fix all cd commands to use path variables
# ToDo - Detect if all actions are already done, Log that they are and skip to operation Don't overwrite git with the same data.
# ToDo - Logging Cleanup

# shellcheck enable=require-variable-braces
# shellcheck disable=1091

source "${DEV1_COMMANDS_PATH}/utils/utilityFunctions"

# --------------------------------------------------

declare -g -a repositoriesArray=()
declare -g -a tasksArray=()
declare -g -a repositoryBranchesArray=()
declare -g -a taskCodeWorkspacesArray=()
declare -g -a taskGitWorktreesArray=()
declare -g suiteName=""
declare -g taskName=""
declare -g repositoryBranch=""
# --------------------------------------------------
function askSuite()
{ 
  if [[ "$1" == "" ]]; then
    if pwd|grep -qP "${DEV1_SUITES_PATH}"; then
      suiteDir="$(pwd)"
      suiteDir="${suiteDir##"${DEV1_SUITES_PATH}"/}"
      suiteDir="${suiteDir%%/*}"
    fi
    read -r -p  "Enter name of suite  default: (${suiteDir}):" s
    suiteName="${s}"
    if [[ "${suiteName}" == "" ]]; then
      suiteName="${suiteDir}"
    fi
  else
    suiteName="$1"
  fi
  suiteDir=${suiteName}
  echo "# --------------------------------------------------"
  #echo; DumpVars suiteName; echo
}
# --------------------------------------------------
function Suite()
{ if (( "${trace}" )); then echo "${space45} function Suite()"; fi
  if [[ -e ${suiteDir} ]]; then
    echo "Updating Suite: ${suiteName}"
  else
    echo "Creating New Suite: ${suiteName}"
  fi
  mkdir -p "${repositoriesDir}"
  mkdir -p "${worktreesDir}"
  mkdir -p "${tasksDir}"
}
# --------------------------------------------------
function RepositoryUrl()
{ if (( "${trace}" )); then echo "${space45} function RepositoryUrl()"; fi
  localRepositoryPath="${repositoriesDir}/${localRepositoryDirName}"
  if [[ -e ${localRepositoryPath} ]]; then
    echo "${localRepositoryPath} was previously created"
    return 0
  else
    echo "${localRepositoryPath}  will be created"
    cd "${repositoriesDir}" || return 1
    echo "git clone --bare ${repositoryUrl} ${localRepositoryDirName}"
    git clone --bare "${repositoryUrl}" "${localRepositoryDirName}"
    return $?
  fi
}

# --------------------------------------------------
function SetUpstreamRepositoryURL()
{ if (( "${trace}" )); then echo "${space45} function SetUpstreamRepositoryURL()"; fi
# .upstream-url

  cd "${localRepositoryDirPath}" || return 1

  GetJsonString upstreamURL "${repository}" '.upstreamURL'
  if [[ "${upstreamURL}" != "null" && "${upstreamURL}" != "" ]]; then

    if git ls-remote upstream >/dev/null 2>&1; then
    echo git remote set-url upstream "${upstreamURL}"
      git remote set-url upstream "${upstreamURL}"
    else
    echo git remote add upstream "${upstreamURL}"
      git remote add upstream "${upstreamURL}"
    fi
    git remote -v
  fi
  return 0
}

# --------------------------------------------------
function SetOriginRepositoryURL()
{ if (( "${trace}" )); then echo "${space45} function SetOriginRepositoryURL()"; fi
#  .origin-url
  cd "${localRepositoryDirPath}" ||return 1
  originUrl=""
  GetJsonString originUrl "${repository}" '.originURL'
  if [[ "${originUrl}" != "null" && "${originUrl}" != "" ]]; then

    if git ls-remote origin >/dev/null 2>&1 ; then
      git remote set-url origin "${originUrl}"
    else
      git remote add origin "${upstreamURL}"
    fi
  fi
  return 0
}

# --------------------------------------------------
# adding echo to this function breaks it
function is_in_local() {
    local branch="${1}"
    local existed_in_local
    existed_in_local=$(git branch --list "${branch}")
    if [[ ${existed_in_local} != "" ]]; then
        return 0
    else
        return 1
    fi
}

function RepositoryBranchWorktree()
{ if (( "${trace}" )); then echo "${space45} function RepositoryBranchWorktree()"; fi

  echo  "cd ${localRepositoryDirPath}"
  cd "${localRepositoryDirPath}" ||return 1

  gitBranchWorktreeContainerDirPath="${DEV1_SUITES_PATH}/${suiteName}/worktrees/${repositoryBranch}"
  gitWorktreePath="${gitBranchWorktreeContainerDirPath}/${localRepositoryName}"
  mkdir -p "${gitBranchWorktreeContainerDirPath}"

  if [[ -e ${gitWorktreePath} ]]; then
    echo "A worktree for ${repositoryBranch} on ${localRepositoryName} exists in ${gitWorktreePath}"
  else
    echo "Creating worktree for branch ${repositoryBranch} in ${gitWorktreePath}"
    if  is_in_local "${repositoryBranch}" ]]; then
        echo  "git worktree add ${gitWorktreePath} ${repositoryBranch}"
        if git worktree add "${gitWorktreePath}" "${repositoryBranch}"; then return 0; else return 1; fi
    else
        echo git worktree add "${gitWorktreePath}" -b "${repositoryBranch}"
        if git worktree add "${gitWorktreePath}" -b "${repositoryBranch}"; then return 0; else return 1; fi
    fi
  fi
  return 0
}

# --------------------------------------------------
function RepositoryBranches()
{ if (( "${trace}" )); then echo "${space45} function RepositoryBranches"; fi
# .branches array of branch names
repositoryBranchesArray=()
  GetJsonArray repositoryBranchesArray "${repository}"  '.branches[]'
  local i
  for ((i=0; i<${#repositoryBranchesArray[@]}; i += 1)); do
    repositoryBranch="${repositoryBranchesArray[i]}"
    repositoryBranch="${repositoryBranch#\"}"
    repositoryBranch="${repositoryBranch%\"}"
    if RepositoryBranchWorktree ; then 
      Separator "done Repository Branch Worktree"; 
    else echo "RepositoryBranchWorktree error"; DumpVars repositoryBranch;return 1; fi
  done
  return 0
}
# --------------------------------------------------
function Repository()
{ if (( "${trace}" )); then echo "${space45} function Repository()"; fi
#{
#  "url": "https://git.code.sf.net/p/flightgear/fgdata",
#  "localRepositoryName": "flightgear-fgdata",
#  "branches": [
#    "next"
#  ]
#}
DumpVars repository
  repositoryUrl=""
  GetJsonString repositoryUrl "${repository}" '.url'
  GetJsonString localRepositoryName "${repository}" '.localRepositoryName'
  localRepositoryDirName="${localRepositoryName}.git"
  localRepositoryDirPath="${DEV1_SUITES_PATH}/${suiteName}/repositories/${localRepositoryDirName}"

  DumpVars localRepositoryName repositoryUrl

  if RepositoryUrl;then
  if SetUpstreamRepositoryURL; then
  if SetOriginRepositoryURL; then
  if RepositoryBranches; then return 0; else return 1; fi fi fi fi 
  return 0
}
# --------------------------------------------------
# --------------------------------------------------
function TaskName()
{ if (( "${trace}" )); then echo "${space45} function TaskName()"; fi
  GetJsonString taskName "${task}" '.taskName'
  mkdir -p "${DEV1_SUITES_PATH}/${suiteName}/tasks/${taskName}"
}
# --------------------------------------------------
GitWorktreeSymlink()
{ if (( "${trace}" )); then echo "${space45} function GitWorktreeSymlink()"; fi
  localRepositoryName=""
  ref=""
  GetJsonString localRepositoryName "${gitWorktree}" '.localRepositoryName'
  GetJsonString ref "${gitWorktree}" '.ref'
  DumpVars gitWorktree ref codeWorkspaceFilePath
  gitWorktreePath="${DEV1_SUITES_PATH}/${suiteName}/worktrees/${ref}/${localRepositoryName}"

# be carefull gitWorktreePath vs codeWorkspaceFilePath - git worktree vs .code-workspace

  cat <<EOD  >>"${codeWorkspaceFilePath}"
        },{
				"path": "${gitWorktreePath}",
EOD
# each task directory gets each of the symlinks covering any of the code workspaces
  worktreeSymLinkPath=${tasksDir}/${taskName}/${localRepositoryName#*-}
  if [[ -e "${worktreeSymLinkPath}" ]]; then rm "${worktreeSymLinkPath}"; fi
  echo ln -s  "${gitWorktreePath}" "${d}/${localRepositoryName#*-}"
  ln -s  "${gitWorktreePath}" "${worktreeSymLinkPath}"
# each build variant directory for a branch needs a symlink to the corresponding sources on that branch.

  shopt -s nullglob
  DumpVars buildsDir ref
  echo "${buildsDir}"/"{ref}}"/*
  for d in "${buildsDir}"/"${ref}"/*; do
    DumpVars d
    worktreeSymLinkPath="${d}/${localRepositoryName#*-}"
      if [[ -e "${worktreeSymLinkPath}" ]]; then rm "${worktreeSymLinkPath}"; fi
      echo ln -s  "${gitWorktreePath}" "${d}/${localRepositoryName#*-}"
      ln -s  "${gitWorktreePath}" "${worktreeSymLinkPath}"
  done
  shopt -u nullglob
  return 0
}
# --------------------------------------------------
function CodeWorkspace()
{ if (( "${trace}" )); then echo "${space45} function CodeWorkspace()"; fi
  workspaceName=""
  GetJsonString workspaceName "${codeWorkspace}" '.workspaceName'
  
  DumpVars codeWorkspace workspaceName taskName
  codeWorkspaceFilePath="${DEV1_SUITES_PATH}/${suiteName}/tasks/${taskName}/${workspaceName}.code-workspace"
  echo "Building ${codeWorkspaceFilePath} including folder paths:"
  echo "         ../../project"

  cat <<EOD  >"${codeWorkspaceFilePath}"
  {
    "folders": [
      { "path": "../../project"
EOD
  declare -a taskGitWorktreesArray=()
  GetJsonArray taskGitWorktreesArray "${codeWorkspace}" '.gitWorktreeSymlinks[]'
  local i
  for ((i=0; i<${#taskGitWorktreesArray[@]}; i += 1)); do
      gitWorktree="${taskGitWorktreesArray[${i}]}"
      GitWorktreeSymlink; returnCode="$?";
  done
  echo "         ./.vscode"
  cat <<EOD  >>"${codeWorkspaceFilePath}"
			},{
				"path": "./.vscode",
			},{
        "path": "."
			}
	]
  }
EOD

  return ${returnCode}
}
# --------------------------------------------------
function CodeWorkspaces()
{ if (( "${trace}" )); then echo "${space45} function CodeWorkspaces"; fi
  taskCodeWorkspacesArray=()
  GetJsonArray taskCodeWorkspacesArray "${task}" '.codeWorkspaces[]'
  dumpVars taskCodeWorkspacesArray
  local i3
  for ((i3=0; i3 < ${#taskCodeWorkspacesArray[@]}; i3 += 1)); do
    codeWorkspace="${taskCodeWorkspacesArray[${i}]}"
    CodeWorkspace
    returnCode="$?"
  done
 echo "Finished CodeWorkspaces - i3 = ${i3}"
  return ${returnCode}
  }

# --------------------------------------------------
function Task()
{ if (( "${trace}" )); then echo "${space45} function Task()"; fi
  TaskName
  CodeWorkspaces
  return 0

}
# --------------------------------------------------
# --------------------------------------------------
# --------------------------------------------------
function ExistingSuiteConfig()
{ if (( "${trace}" )); then echo "${space45} function ExistingSuiteConfig()"; fi
  cd "${suiteDir}" || return 1
  config=$(cat "${suiteConfigFile}")
  if [[ "${config}" == "" ]]; then config="{}"; fi
  
  if ! <<<"${config}" jq 'if . == {} then error("empty config found") else . end'; then

    ExistingSuiteWithoutConfig
    return 1
  fi

  GetJsonArray repositoriesArray "${config}"  '.config.repositories[]'
  GetJsonArray tasksArray "${config}"  '.config.tasks[]'

  local i1
  # for ((i1=0; i1 < ${#repositoriesArray[@]}; i1 += 1)); do
  #   repository="${repositoriesArray[${i}]}"
  #   echo "Processing Repository ${repository}"
  #          if Repository; then Separator "Repository"; else echo "Repository Error"; DumpVars repository; return 1; fi
  #   echo "Finished Repository - i = ${i}"
  # done

  for ((i2=0; i2 < ${#tasksArray[@]}; i2 += 1)); do
    task="${tasksArray[${i2}]}"
    echo "Processing Task ${task}"
      Task;
    returnCode="$?"
    echo "Finished Task - j = ${i2}"
  done
    return 0
}
# --------------------------------------------------
function ExistingSuiteWithoutConfig()
{
  if  (( "${trace}" )); then echo "${space45} function ExistingSuiteWithoutConfig"; fi


  echo 
  echo "ExistingSuiteWithoutConfig"
  echo
  mkdir -p \
        "${suiteDir}"\
        "${projectDir}"\
        "${repositoriesDir}" "${worktreesDir}" "${tasksDir}"\
        "${buildsDir}" "${installDir}" "${runDir}"  # just directories at the suite level
                                          # suite details go under project
  touch "${suiteConfigFile}"
  cd    "${projectDir}" || return 1
  code  .
  return 1
}
# --------------------------------------------------
function NewSuite()
{
  if (( "${trace}" )); then echo "${space45} function NewSuite"; fi

  echo 
  echo "NewSuite"
  echo 

  mkdir -p "${suiteDir}"\
          "${projectDir}"\
          "${repositoriesDir}" "${worktreesDir}" "${tasksDir}"\
          "${buildsDir}" "${installDir}" "${runDir}"  # just directories at the suite level
                                          # suite details go under project

# TO DO Make these names include the word Path, 
# TO DO Alternative: Just Dir means path always. Always use DirName if you mean $(dirname $xDir)



  return 1
}
# --------------------------------------------------
# --------------------------------------------------
# --------------------------------------------------

returnCode=0
space45="                                   "
if [[ "${DEV1_TRACE}" != "" ]]; then trace=1; fi
if [[ "${DEV1_DEBUG}" != "" ]]; then debug="${DEV1_DEBUG}"; trace=1; set -x; fi
if (( debug != 0 )) ; then echo "yes we are debugging"; fi


# if [[ "$returnCode" == "0" ]]; then ValidateSuite; fi
suiteName=""
if askSuite "$1"; then
  suiteDir="${DEV1_SUITES_PATH}/${suiteName}"
  worktreesDir="${suiteDir}/worktrees"
  tasksDir="${suiteDir}/tasks"
  repositoriesDir="${suiteDir}/repositories"
  worktreesDir="${suiteDir}/worktrees"
  tasksDir="${suiteDir}/tasks"
  buildsDir="${suiteDir}/builds"
  projectDir="${suiteDir}/project"
  installDir="${suiteDir}/install"
  runDir="${suiteDir}/run"
  suiteConfigFile="${suiteDir}/project/${suiteName}.config.json"

  if Suite; then

    DumpVars suiteName suiteDir suiteConfigFile

    if [[ -d ${suiteDir} && -e ${suiteConfigFile} ]]; then
      ExistingSuiteConfig
      returnCode="$?"
    elif  [[ -d ${suiteDir} ]]; then
      ExistingSuiteWithoutConfig
      returnCode="$?"
    else
      newSuite
      returnCode="$?"
    fi
  fi
fi


# ------------------------------------------------------------------------------------------

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then exit ${returnCode}; else return ${returnCode} 2>/dev/null; fi
