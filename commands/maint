#!/bin/bash
# dev1/commands/add
# Alias a="$DEV1_COMMANDS/add"
#
# a suite <suite> <repo-url> <local-repo-name> <development-branch>
# a suite <suite> <repo-url> <development-branch>
# 
# Creates a new suite from a git url, local-name for the repository and development branch.
#
# creates a new suite if not already present
# clones a bare copy of the repo in ${DEV1_SUITES}/<suite>/<local-repo-name>
# creates a worktree for the repo in ${DEV1_SUITES}/<suite>/worktrees/<development-branch>
# creates task directory ${DEV1_SUITES}/<suite>/tasks/<development-branch> with symlink
# to ${DEV1_SUITES}/<suite>/worktrees/version/<development-branch>
# creates ${DEV1_SUITES}/<suite>/tasks/<development-branch> <development-branch>.code-workspace
#
# a worktree <suite> <task-name> <local-repo-name>/<repo-url> <repo-branch>
#
# adds a repository worktree to a task, specifying a specific branch for the task.

# recall that task names are usually the same as the branch of at least one of the
# repositories needed for the task.

# Repository will be cloned bare if needed and the repo-url is given.
# The task will be created if it does not exist
# if just the local repo name is given, an existing previously cloned repo will be used.
# If the branch and/or worktree does not exist it will be created.

# adding a suite, task or worktree that already exists will not cause a problem.
# if any part of what is needed for a suite or task, it will be added, provided the
# parameters passed are valid.
# parameters which conflict with what is already there are reported as errors.

# paths:
#
# ├── repositories
# │   ├── repo1.git
# │   ├── repo2.git
# │   ├── repo3.git
# ── tasks
# │   ├── taskA
# │   │   └── repoNameA
# │   ├── TaskB
# │   │   ├── build
# │   │   ├── repo1 -> /work/suites/fg/worktrees/branch/repo1
# │   │   ├── repo2 -> /work/suites/fg/worktrees/branch/repo2
#
# usage
# add <what-to-add> <suite-name> <git-url> <local-repository-name> <existing-branch>

function repo() {
  cd $suite_repositories_dir
  local_clone_dir=$suite.git
  git ls-remote $repo_url >/dev/null 2>&1
  if [[ "$?" == "0" && ! -e $local_clone_dir ]]; then
    git clone --bare $repo_url ${local_clone_dir}
  fi
  cd - >/dev/null
}
function local_repo() {
  cd $suite_repositories_dir
  local_clone_dir=$suite.git
  repo_url=${DEV1_SUITES}/_templates/readme/
  if [[ ! -e ${local_clone_dir} ]]; then git clone --bare $repo_url ${local_clone_dir}; fi
  cd ${local_clone_dir}
  git remote remove origin
  cd - >/dev/null
}

function branch_worktree() {
  local_clone_dir=${DEV1_SUITES}/$suite/repositories/$suite.git
  worktree_parent_dir=$suite_worktrees_dir/$branch_name
  worktree_dir=$worktree_parent_dir/$suite
  mkdir -p $worktree_parent_dir
  if [[ ! -e ${worktree_dir} ]]; then
    echo
    cd $local_clone_dir
    git worktree add ${worktree_dir} $branch_name
    echo
  fi
}
function branch_task_dir() {
task_dir=$suite_tasks_dir/$branch_name
  mkdir -p ${task_dir}
}
function branch_code_workspace() {
  vscode_workspace_file=${task_dir}/${branch_name}.code-workspace
  if [[ ! -e $vscode_workspace_file ]]; then
    cp $DEV1/templates/template.code-workspace $vscode_workspace_file
  fi
}
function branch_symlink() {

if [[ ! -L ${task_dir}/${suite} ]]; then
    ln -s $worktree_parent_dir/${suite} ${task_dir}/${suite}
  fi


}
function setup_branch() {
  branch_worktree
  branch_task_dir
  branch_symlink
}


# --------------------------------------------------
function ask()
{
  declare -g $1="$2"
  if [ -z "${!1}" ]; then
    echo "$3"
    read $1
  fi
}
# --------------------------------------------------
function askSuite()
{
  if [[ "$1" == "" ]]; then
    if [[ $(pwd|grep -P "${DEV1_SUITES}") ]]; then
      suite_dir=$(pwd)
      suite_dir=${suite_dir##${DEV1_SUITES}/}
      suite_dir=${suite_dir%%/*}
      default_suite_prompt=" (default $suite_dir)"
    fi
    read -p "Enter name of suite${default_suite_prompt}:" s
      declare -g   suite_name=$s
      if [[ "$suite_name" == "" ]]; then
        suite_name=$suite_dir
      fi
  else
    suite_name=$1
  fi
}
# --------------------------------------------------
function addSuite()
{
  suite=$1
  export suite_dir=${DEV1_SUITES}/$suite
  export suite_repositories_dir=${DEV1_SUITES}/$suite/repositories
  export suite_worktrees_dir=${DEV1_SUITES}/$suite/worktrees
  export suite_tasks_dir=${DEV1_SUITES}/$suite/tasks
  if [[ "$DEV1_DEBUG" != "" ]]; then
    set +x
    echo
    echo "suite_dir:              $suite_dir"
    echo "suite_repositories_dir: $suite_repositories_dir"
    echo "suite_worktrees_dir:    $suite_worktrees_dir"
    echo "suite_tasks_dir:        $suite_tasks_dir"
    echo
    set -x

  fi
  mkdir -p $suite_dir
  mkdir -p $suite_repositories_dir
  mkdir -p $suite_worktrees_dir
  mkdir -p $suite_tasks_dir
  }
# --------------------------------------------------
function addClone()
{
  echo addClone - not implemented
  cd $suite_repositories_dir
  declare -g git_url=$1
  declare -g local_repo_name=$2
  declare -g initial_worktree_branch=$3
  git clone $git_url $local_repo_name
  # local_repo_name might have been a branch
  # branch becomes what local_repo_name was and the remote repo name is substituted.
  # if no branch was given, select one of next, main or master depending on which is present
  # and make a worktree with  the passed branch name in $3, or
}
function addLocalGit()
{
  echo addLocalGit - not implemented
}
# --------------------------------------------------
function addOriginURL()
{
  echo addOriginURL - not implemented
}
# --------------------------------------------------
function addUpstreamURL()
{ echo addUpstreamURL - not implemented
}
# --------------------------------------------------
function addRemoteURL()
{ echo addRemoteURL - not implemented
}
# --------------------------------------------------
function addWorktree()
{ echo addWorktree - IN PROGRESS
  set -x
  # worktree is created for a branch, tag or commit
  repository=$1
  worktree_branch=$2
  repository_dir=${DEV1_SUITES}/${repository}/repositories/${repository}.git
  worktree_dir=${DEV1_SUITES}/${suite}/worktrees/${repository}/${worktree_branch}
  task_dir=$suite_tasks_dir/${worktree_branch}
  mkdir -p ${worktree_dir}/..
  cd  ${repository_dir} # supports only one repository per suite
  git worktree add ${worktree_dir} ${worktree_branch}  # supports only existing branches
                                                          # supports only worktrees that do not yet exist
  mkdir -p ${task_dir}
  vscode_workspace_file=${task_dir}/${worktree_branch}.code-workspace

  if [[ ! -e $vscode_workspace_file ]]; then
    cp $DEV1/templates/template.code-workspace $vscode_workspace_file
  fi

  if [[ ! -L ${task_dir}/${suite} ]]; then
    ln -s ${worktree_dir} ${task_dir}/$repository
    git /$repository
  fi
  cd  ${task_dir}
}

# --------------------------------------------------
function removeWorktree()
{
  repository=$1
  worktree_branch=$2
  repository_dir=${DEV1_SUITES}/${repository}/repositories/${repository}.git
  worktree_dir=${DEV1_SUITES}/${suite}/worktrees/${repository}/${worktree_branch}
  task_dir=$suite_tasks_dir/${worktree_branch}/${repository}
  cd ${repository_dir}
  git worktree list
  git worktree remove ${worktree_dir}
#  echo "Removing Worktree Directory Recursively: ${worktree_dir}"
#  rm -rfI ${worktree_dir}
  echo "Removing Task Directory Recursively: ${task_dir}/.."
  cd ${task_dir}/..
  rm -rfI ./$worktree_branch
}
# --------------------------------------------------
function addBranch()
{ echo addBranch - not implemented
}
# --------------------------------------------------
function addTag()
{ echo addTag - not implemented
}
# --------------------------------------------------
function addWgetArchive(){ echo addWgetArchive - not implemented
}
# --------------------------------------------------
# --------------------------------------------------
# --------------------------------------------------
if [[ "$DEV1_DEBUG" != "" ]]; then
  echo "STARTING $BASH_SOURCE $@"
  set -x
fi
# --------------------------------------------------


RETURN_CODE=0


ask what_to_add   "$1" "What are we adding? valid entries: l, c, o, u, w, r, local-git, clone, wget-arachive origin-url, upstream-url, worktree remove-worktree"
if [[ "$1" == "$what_to_add" ]] ; then
    shift 1
fi
askSuite $1
if [[ "$suite_name" != "" ]]; then
  addSuite $suite_name
  if [[ "$1" == $suite_name && ${#suite_name} != 0 ]] ; then
      shift 1
  fi
  if [[ $suite_name == "" ]]; then
      echo "Error ""$suite_name"" is not a valid suite name"
      if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then exit else return 2> /dev/null; fi
  fi
fi
case "$what_to_add" in
c|clone)
    addClone $@;;
l|local|local-git)
    addLocalGit $@;;
o|origin|origin-url)
    addOriginURL;;
u|upstream|upstream-url)
    addUpstreamURL;;
u|remote|remote-url)
    addRemoteURL;;
w|worktree)
    addWorktree $suite $1;;
r|remove|remove-worktree)
    removeWorktree $suite $1;;
b|branch)
    addBranch;;
t|tag)
    addTag;;
w|wget|wget-archive)
    addWgetArchive;;
  *)
    echo Cannot add $what_to_add. Invalid entry
    RETURN_CODE=1;;
esac
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then exit $RETURN_CODE; else return 2> /dev/null; fi

  ask repo_url   "$3" "Repository URL or template-name: readme, cpp, node, python"
  ask branch_name  "$4" "Name of branch in local repository"

cd ${DEV1_SUITES}

top_level
if [[ "$what_to_add" == "wget" ]]; then
  cd $suite_repositories_dir
  local_repo
  setup_branch
  if [[ ! -e $(basename $repo_url) ]]; then
    wget $repo_url
  fi
  cd $suite_tasks_dir/$branch_name/$suite
  unar  $suite_repositories_dir/*.zip
elif  [[ "$what_to_add" == "local" ]]; then
  localRepo
  setup_branch
elif  [[ "$what_to_add" == "remote" ]]; then
  repo
  setup_branch
else
  echo "*** error - Unknown repo source type ***"
fi
return 1

set +x
source $DEV1_COMMANDS/show
source $DEV1_COMMANDS/suite $suite $branch_name
if [[ "$DEV1_DEBUG" != "" ]]; then
  echo "ENDING   $BASH_SOURCE $@"
fi
