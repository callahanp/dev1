#!/bin/bash
# dev1/commands/maint
# Alias m="source $DEV1_COMMANDS/maint"
#
# maint processes a json configuration file to create and maintain a git worktree based development
# environtment for multi-root visual studio code workspaces.

# usage:
#
# using bash source:

#   source $DEV1_COMMANDS/maint <suite-name>

# or through an alias: 
#   m <suiteName>
# or as a command
#   $DEV1_COMMANDS/maint <suiteName>
# --------------------------------------------------
function ShowVariables()
{
  while [[ "$1" != "" ]] ; do
    echo "$1:     ${!1}"
    shift
  done
}
function ShowJson()
{
  while [[ "$1" != "" ]] ; do
    echo "$1:     $(echo ${!1}|jq '.')"
    shift
  done
}
# --------------------------------------------------
function askSuite()
{
  if [[ "$1" == "" ]]; then
    if [[ $(pwd|grep -P "${DEV1_SUITES}") ]]; then
      suite_dir=$(pwd)
      suite_dir=${suite_dir##${DEV1_SUITES}/}
      suite_dir=${suite_dir%%/*}
      default_suite_prompt=" (default $suite_dir)"
    fi
    read -p "Enter name of suite${default_suite_prompt}:" s
      declare -g   suiteName=${s}
      if [[ "${suiteName}" == "" ]]; then
        suiteName=$suite_dir
      fi
  else
    suiteName=$1
  fi
}

# --------------------------------------------------
ValidateSuite()
{
  echo ValidateSuite - IMPLEMENT ME!
  return 0
}
# --------------------------------------------------
function Suite()
{
  echo "Suite"
  if [[ -e ${SUITE_DIR} ]]; then
    echo Updating Suite: ${SuiteName}
  else
    echo Creating New Suite: ${SuiteName}
  fi
  mkdir -p ${DEV1_SUITES}/${suiteName}/worktrees
  mkdir -p ${DEV1_SUITES}/${suiteName}/tasks
  mkdir -p ${DEV1_SUITES}/${suiteName}/repositories
}
# --------------------------------------------------
function RepositoryURL()
{
 

  if [[ -e ${suiteDir}/repositories/${localRepositoryName} ]]; then
    echo "${suiteDir}/repositories/${localRepositoryName} was previously created"
    return 0
  else
    echo "${suiteDir}/repositories/${localRepositoryName} will be created"
    cd ${suiteDir}/repositories/
    echo "git clone --bare $repositoryURL ${localRepositoryName}"
    git clone --bare $repositoryURL ${localRepositoryName}
    return $?
  fi
}
# --------------------------------------------------
function RepositoryUpstreamURL()
{
# .upstream-url

  cd ${DEV1_SUITES}/${suiteName}/repositories/${localRepositoryName}

  upstreamURL=$(echo ${repository} | jq -r '.upstreamURL')

  if [[ "$upstreamURL" != "null" ]]; then
    discard=$(git ls-remote upstream 2>&1 >/dev/null)
    if [[ "$?" == "0" ]]; then
    echo git remote set-url upstream ${upstreamURL}
      git remote set-url upstream ${upstreamURL}
    else
    echo git remote add upstream ${upstreamU
    RL}
      git remote add upstream ${upstreamURL}
    fi
    git remote -v
  fi
 
  return 0
}
# --------------------------------------------------
function RepositoryOriginURL()
{
#  .origin-url
 cd ${DEV1_SUITES}/${suiteName}/repositories/${localRepositoryName}
 originUrl=$(echo ${repository} | jq -r '.originURL')
  if [[ "$originUrl" != "null" ]]; then
    discard=$(git ls-remote origin 2>&1 >/dev/null)
    if [[ "$?" == "0" ]]; then
      git remote set-url origin ${originUrl}
    else
      git remote add origin ${upstreamURL}
    fi
  fi
  return 0
}
# --------------------------------------------------
function is_in_local() {
    local branch=${1}
    local existed_in_local=$(git branch --list ${branch})

    if [[ -z ${existed_in_local} ]]; then
        echo 0
    else
        echo 1
    fi
}
function RepositoryBranchWorktree()
{
  echo ""
  echo "Implement RepositoryBranchWorktree"
  echo ""
  cd $localRepositoryPath
  if [[ ! -e ${DEV1_SUITES}/worktrees/${localRepositoryName} ]]; then
    mkdir -p ${DEV1_SUITES}/worktrees/${localRepositoryName}
  fi
  worktreePath=${DEV1_SUITES}/${suiteName}/worktrees/${localRepositoryName}/${branch}
  if [[ ! -e ${worktreePath} ]]; then
    is_in_local ${branch}
    if [ "$?" == 0 ]; then
        git worktree add ${worktreePath} ${branch}
    else
        git worktree add ${worktreePath}
    fi
  fi
  return 0
}
# --------------------------------------------------
function RepositoryBranches()
{
# .branches array of branch names
  branches=$(echo ${repository} | jq '.branches')
  for branch in $(echo ${branches}|jq -r '.[]');  do
  RepositoryBranchWorktree
  done
  return 0
}
# --------------------------------------------------
function Repository()
{
#{
#  "url": "https://git.code.sf.net/p/flightgear/fgdata",
#  "localRepositoryName": "flightgear-fgdata",
#  "branches": [
#    "next"
#  ]
#}
  repositoryURL=$(echo ${repository} | jq -r '.url')
  localRepositoryName=$(echo ${repository} | jq -r '.localRepositoryName')
  localRepositoryPath=${DEV1_SUITES}/${suiteName}/repositories/${localRepositoryName}
  RepositoryURL;             if [[ "$?" != "0" ]];then return 1; fi
  RepositoryUpstreamURL;     if [[ "$?" != "0" ]];then return 1; fi
  RepositoryOriginURL;       if [[ "$?" != "0" ]];then return 1; fi
  RepositoryBranches;        if [[ "$?" != "0" ]];then return 1; fi
  return 0
}
# --------------------------------------------------
# --------------------------------------------------
function TaskName()
{
  taskName=$(echo ${task} | jq -r '.taskName')
  mkdir -p ${DEV1_SUITES}/${suiteName}/tasks/${taskName}
}
# --------------------------------------------------
GitWorktree()
{
  localRepositoryName=$(echo ${gitWorktree}| jq -r '.localRepositoryName')
  ref=$(echo ${gitWorktree}| jq -r '.ref')
    echo "         ${DEV1_SUITES}/worktrees/${localRepositoryName}/${ref}"
  cat <<EOD  >>$workspaceFilePath
        },{
				"path": "${DEV1_SUITES}/worktrees/${localRepositoryName}/${ref}",
EOD
}
# --------------------------------------------------
function CodeWorkspace()
{
  workspaceName=$(echo $codeWorkspace| jq -r '.workspaceName')
  gitWorktrees=$(echo $codeWorkspace| jq  '.gitWorktrees')
  workspaceFilePath=${DEV1_SUITES}/${suiteName}/tasks/${taskName}/${workspaceName}.code-workspace
  echo "Building $workspaceFilePath including folder paths:"
  echo "         ../../config"

  cat <<EOD  >$workspaceFilePath 
  { 
	  "folders": [
		  { "path": "../../config"
EOD

  for gitWorktree in $(echo $gitWorktrees | jq -c '.[]'); do
      if [[ "$RETURN_CODE" == "0" ]]; then GitWorktree; RETURN_CODE=$?; fi
  done
  echo "         ./.vscode"
  cat <<EOD  >>$workspaceFilePath
			},{
				"path": "./.vscode",
			},{
		    "path": "."
			}
	]
  }
EOD

  return $RETURN_CODE
}
# --------------------------------------------------
function CodeWorkspaces()
{

  codeWorkspaces=$(echo ${task} | jq -r '.codeWorkspaces')

  for  codeWorkspace in $(echo ${codeWorkspaces} |jq  -c '.[]'); do
    if [[ $RETURN_CODE == "0" ]]; then CodeWorkspace; RETURN_CODE=$?; fi
  done

  return $RETURN_CODE
  }
# --------------------------------------------------
function WorktreeSymlinks()
{
  echo "Implement WorktreeSymlinks"
}
# --------------------------------------------------
function Task()
{
  TaskName
  CodeWorkspaces
  echo "Implement WorktreeSymlinks"
  return 0

}
# --------------------------------------------------
# --------------------------------------------------
# --------------------------------------------------
function ExistingSuiteConfig()
{
  echo
  echo "ExistingSuiteConfig"
  echo 
  cd ${DEV1_SUITES}/${suiteName}
  config=$(<config/${suiteName}.config.json)

  #echo "${config}" |jq '.'>x

  repositories="$(echo ${config} |jq '.config.repositories')"

  repositoryCount=$(echo ${repositories} | jq 'length')
  tasks=$(echo ${config} |jq '.config.tasks')
  tasksCount=$(echo ${tasks} |jq 'length')

  for  repository in $(echo ${repositories} |jq  -c '.[]'); do
    Repository;        if [[ "$?" != "0" ]];then return 1; fi
  done
  
  for  task in $(echo ${tasks} |jq  -c '.[]'); do
    if [[ $RETURN_CODE == "0" ]]; then Task; fi
    RETURN_CODE=$?
 done
    return 0
}
# --------------------------------------------------
function ExistingSuiteWithoutConfig()
{
  echo 
  echo "ExistingSuiteWithoutConfig"
  return 1
    echo 
}
# --------------------------------------------------
function NewSuite()
{
  echo 
  echo "NewSuite"
  echo 
  return 1
}
# --------------------------------------------------
# --------------------------------------------------
# --------------------------------------------------

RETURN_CODE=0
askSuite $1

if [[ "$RETURN_CODE" == "0" ]]; then ValidateSuite; fi
if [[ "$RETURN_CODE" == "0" ]]; then Suite; fi
if [[ "$?" == "0" ]]; then
  suiteDir=${DEV1_SUITES}/${suiteName}
  configFile=${suiteDir}/config/${suiteName}.config.json

  ShowVariables suiteName suiteDir configFile

  if [[ -d ${suiteDir} && -e ${configFile} ]]; then
    ExistingSuiteConfig
    RETURN_CODE=$?
  elif  [[ -d ${suiteDir} ]]; then
    ExistingSuiteWithoutConfig
    RETURN_CODE=$?
  else
    newSuite
    RETURN_CODE=$?
  fi
fi


# ------------------------------------------------------------------------------------------

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then exit $RETURN_CODE; else return $RETURN_CODE 2>/dev/null; fi
