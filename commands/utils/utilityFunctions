#!/bin/bash
declare -g _debug=0
if  [ -o xtrace ]; then
declare -g unsetx="set +x"
declare -g setx="set -x"
else
declare -g unsetx=""
declare -g setx=""
fi
function GetTaskDescription(){
set -x
declare -g _TaskDescription
GetConfigJson "$1"
}
function GetConfigJson(){
declare -g sourceforgeUsername
declare -g githubUsername
declare -g gitlabUsername
declare -g _configJson
# three ways to determine config file
if [[ "$1" != "" ]]; then
  if [[ -e $DEV1_SUITES_PATH/$1 ]]; then
    # 1. $1 is a suite name
    _configFilePath=$DEV1_SUITES_PATH/$1/project/$1.config.json
  else
    # 2. $1 is a path to a config file
    _configFilePath=$(realpath "$1")
  fi
elif [[ "$DEV1_SUITE_NAME" != "" ]]; then
  # 3. $1 is blank, and the current suite is used
  _configFilePath="$DEV1_SUITES_PATH/$DEV1_SUITE_NAME/project/${DEV1_SUITE_NAME}.config.json"
fi
if [[ "$_configFilePath" != "" && ! -e $_configFilePath ]]; then
  echo "unable to find $_configFilePath"
  return 1
elif [[ "$_configFilePath" == "" ]]; then
  echo "No config file found or specified"
  return 1
fi

_configJson=$(cat "${_configFilePath}")
if [[ "$_configJson" == "" ]]; then _configJson="{}"; fi

if ! <<<"$_configJson" jq 'if . == {} then error("empty config found") else . end'; then
  echo "Config File $_configFilePath" is empty
  return 1
fi
# shellcheck disable=SC2001
_configJson=$(echo "$_configJson"|sed -e "s/[$]{sourceforgeUsername}/$sourceforgeUsername/g")
# shellcheck disable=SC2001
_configJson=$(echo "$_configJson"|sed -e "s/[$]{githubUsername}/$githubUsername/g")
# shellcheck disable=SC2001
_configJson=$(echo "$_configJson"|sed -e "s/[$]{gitlabUsername}/$gitlabUsername/g")
unset _configFilePath
# -------------------------------------------
export _configJson
}
function GetJsonString()
{
  local -; set +x
  local json="$2"
  local jqueryExpression="$3"
  #echo "mapfile -t ${1} < <(echo $json | jq -r $jqueryExpression)"
  mapfile -t "${1}" < <(echo "$json" | jq -r "$jqueryExpression")
  return 0
}
function GetJsonArray()
{
  local -; set +x
  local json="$2"
  local jqueryExpression="$3"
  #echo "mapfile -t \"${1}\" < <(echo \"$json\" | jq -c \"$jqueryExpression\")"
  mapfile -t "${1}" < <(echo "$json" | jq -c "$jqueryExpression")
  return 0
}
function ShowJson()
{
  local -; set +x
  while [[ "$1" != "" ]] ; do
    echo "$1:"
    echo "$1" | ${!1} jq '.'
    shift
  done
  return 0
}
function ShowArray()
{
  while [[ "$1" != "" ]] ; do
    declare -n ref="$1"
    echo; echo "$1:"; echo
    for ((i=0; i < ${#ref[@]}; i += 1))
    do
      echo "$i  ${ref[$i]}"
    done
    shift 1
  done
}
declare -g _debug_on
function DumpVars() {
  (set +x; if (( _debug_on )); then #
    echo " ";
    echo --------------------------------------------------------------;
    while  [[ "$1" != "" ]]; do declare -p "${1}"; shift; done; \
    echo --------------------------------------------------------------; \
  fi )
}

function dumpvars(){
  DumpVars "$@"
}

function Separator ()
{
  echo
  echo -------------------------- "$1" --------------------------
  echo
}
function FindRepositories()
{
  local originalDirectory
  originalDirectory=$(pwd)
  count=0
  while IFS= read -r -d '' gitRepo
  do
    (( count++ ))
    echo "${gitRepo}"
    cd "${gitRepo}" || ls -lah "${gitRepo}"
    git remote -v
  done <   <(find "${DEV1_SUITES_PATH}" -name '*.git' -print0)
  echo "Found $count repositories"
  cd "${originalDirectory}" || return 1
}
function CountTasks()
{
  echo 1
}
function UnsetDEV1EnvVars()
{
# we're unsetting. v is discarded
# shellcheck disable=SC2034
while IFS='=' read -r -d '' n v; do
    if [[ "$n" =~ ^DEV1_ ]]; then
      printf "unset '%s'\n" "$n"
      unset "$n"
    fi
done < <(env -0)
}
if [[ "$DEV1_DEBUG" != "" ]]; then _debug_on=1; fi

declare -Ag actionLog

function LogAction(){

local -; set +x
  local _d=$(date +"%Y-%m-%d %H:%M:%S.%3N")
  while [[ ${actionLog["$_d"]} != "" ]]; do
    _d=$(date +"%Y-%m-%d %H:%M:%S.%3N")
  done
  actionLog["$_d"]="$*"
  # shellcheck disable=SC2086
  echo ${actionLog["$_d"]}
}
function PrintActionLog(){
 ( local -; set +x;  for x in "${!actionLog[@]}"; do printf "%s: %s\n" "$x" "${actionLog[$x]}"; done |sort )
}